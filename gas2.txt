残念ながら、スプレッドシートのGAS単体で、コマが「くるくる回る」ような複雑なアニメーションを直接実現することはできません。 GASは主にデータの自動処理や、Googleサービス間の連携を目的としており、リアルタイムなグラフィック描画やフレームごとのアニメーション機能は持っていません。
しかし、ルーレットの「ランダムに選択して結果を表示する」という本質的な機能は実現可能です。円グラフをルーレットに見立て、GASを使ってランダムで項目を選択し、結果をポップアップで表示する、という方法で代用できます。
ルーレットの実現方法 (視覚的な代替案)
以下の手順で、視覚的な効果を伴うルーレットを作成できます。
 * 円グラフの作成: あらかじめ、ルーレットの選択肢（例：チームメンバーの名前、ランチのメニューなど）を含む円グラフを作成しておきます。これは手動でも、前回のサンプルコードのようにGASで動的に作成しても構いません。
 * GASでランダム抽選: スクリプトを実行すると、GASがA列のデータからランダムに1つを選択します。
 * 結果の表示: 抽選結果をポップアップ（ダイアログ）でユーザーに表示します。
サンプルソースコード：ランダム抽選ルーレット
以下のコードは、アクティブシートのA列のデータからランダムに1つを選択し、結果をポップアップで表示するものです。
/**
 * A列のデータからランダムに1つを選択し、結果をポップアップ表示するルーレットスクリプトです。
 */
function runRoulette() {
  
  const sheet = SpreadsheetApp.getActiveSheet();
  
  // A列のデータ範囲をすべて取得
  const dataRange = sheet.getRange('A:A');
  const values = dataRange.getValues();
  
  // ヘッダー行と空行を削除して、選択肢のみの配列を作成
  const options = values.flat().filter(item => typeof item === 'string' && item.trim() !== '');
  
  if (options.length === 0) {
    SpreadsheetApp.getUi().alert('A列に選択肢がありません。');
    return;
  }
  
  // ランダムに項目を選択
  const randomIndex = Math.floor(Math.random() * options.length);
  const selectedItem = options[randomIndex];
  
  // 選択結果をポップアップで表示
  SpreadsheetApp.getUi().alert(`ルーレットの結果は…\n\n「${selectedItem}」に決定しました！`);
  
  // (オプション) 選択された項目を強調表示
  // 例: セルの背景色を変更
  // const row = values.findIndex(row => row[0] === selectedItem) + 1;
  // if (row > 0) {
  //   sheet.getRange(row, 1).setBackground('#ffff00'); // 黄色にハイライト
  // }
}

このスクリプトをボタンに割り当てれば、ボタンを押すたびにランダムな結果が得られ、ルーレットのような感覚で使うことができます。
より高度な実装（サイドバーの利用）
もし、どうしてもアニメーション的な要素を入れたい場合は、HTML/CSS/JavaScriptを組み合わせた**サイドバー（Sidebar）**を作成する必要があります。
 * GAS: サーバーサイドの処理（ランダムな選択）を担当します。
 * HTML/CSS/JavaScript: スプレッドシートの横に表示されるサイドバー内で、JavaScriptを使って円グラフの画像を回転させるアニメーションを実装します。
この方法はより複雑ですが、Web開発の知識があれば実現可能です。しかし、通常の簡単なルーレット機能であれば、上記の方法で十分実用的です。
